#!/usr/bin/env earl

module Main

import "newprog.earl" almost

let progname = "";
let version = "0.0.1";

let HELP_SHORT = 'h';
let HELP_LONG = "help";

let VERSION_SHORT = 'v';
let VERSION_LONG = "version";

let NEW_PROJ_SHORT = "n";
let NEW_PROJ_LONG = "new";

@world fn usage() {
    println("Usage: ", progname, " [options]");
    println();
    println("Options:");
    println("  -", HELP_SHORT, ", --", HELP_LONG, " ... Print this message");
    println("  -", VERSION_SHORT, ", --", VERSION_LONG, " ... Print version information");
    println("  -", NEW_PROJ_SHORT, ", --", NEW_PROJ_LONG, " ... Create a new EARL project template");
    exit(1);
}

fn help() {
    usage();
}

@world fn version() {
    println("earlmngr " + version);
}

@world fn handle_args(@ref args) {
    let unknown_arg = |inp| {
        panic("unknown argument `" + inp + "`, see --" + HELP_LONG + " or --" + HELP_SHORT);
    };

    for i in 0..len(args) {
        let word = args[i];

        if len(word) > 1 && word[0] == '-' && word[1] == '-' {
            match word.substr(2, len(word)) {
                HELP_LONG     -> { help(); }
                VERSION_LONG  -> { version(); }
                NEW_PROJ_LONG -> { NewProj::create_new_earl_project(); }
                _             -> { unknown_arg(word); }
            }
        }
        else if word[0] == '-' {
            for j in 1..len(word) {
                match word[j] {
                    HELP_SHORT    -> { help(); }
                    VERSION_SHORT -> { version(); }
                    _             -> { unknown_arg(word); }
                }
            }
        }
        else {
            unknown_arg(word);
        }
    }
}

@world fn main() {
    let args = argv();
    progname = args[0];
    args.pop(0);
    handle_args(args);
}

main();

