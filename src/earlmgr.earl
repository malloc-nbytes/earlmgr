#!/usr/bin/env earl

# MIT License

# Copyright (c) 2023 malloc-nbytes

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

##############################
#       EARLMGR DRIVER       #
##############################

module EARLMgr

#############################
# BEGIN FIRST TIME SETUP
#############################

set_flag("--show-lets", "--show-muts", "--show-bash");

import "std/script.earl"; as scr
import "std/system.earl"; as sys

#-- All of the required programs for setup.
@const let REQ_PROGRAMS = ["wget", "git", "earl"];

#-- The environment variables that earlmgr needs to know for locations.
@const let EARLMGR_INSTALL_LOC_ENVVAR, EARLMGR_IMPORT_LOC_ENVVAR = (
    "EARLMGR_INSTALL_LOC",
    "EARLMGR_IMPORT_LOC",
);

#-- The main, most up-to-date version link.
@const let EARLMGR_MAIN_LINK = "https://raw.githubusercontent.com/malloc-nbytes/earlmgr/refs/heads/main/src/earlmgr.earl";

#-- The required modules for earlmgr.
@const let EARLMGR_MODULE_LINKS = (
    "https://raw.githubusercontent.com/malloc-nbytes/earlmgr/refs/heads/main/src/newprog.earl",
    "https://raw.githubusercontent.com/malloc-nbytes/earlmgr/refs/heads/main/src/templates.earl",
);

#-- Get the installation prefix from what is
#-- stored in the EARL installation.
@const let INSTALL_PREFIX = sys::cmdstr("earl --install-prefix")
                                .split(" ")
                                .rev()[0]
                                .filter(|s|{return s != '\n';});

#-- The location for the earlmgr script to reside.
@const let INSTALL_BIN_LOCATION = INSTALL_PREFIX+"/bin";

#-- The location for the required modules to reside.
@const let INSTALL_IMPORT_LOCATION = INSTALL_PREFIX+"/include/EARL";

fn log(msg) {
    println(f"[earlmgr] ----- {msg} -----");
}

@world fn install_earlmgr() {
    log("Installing earlmgr...");

    let echo_cmd = f"echo \"export {EARLMGR_INSTALL_LOC_ENVVAR}={INSTALL_BIN_LOCATION}\" >> "+env("HOME")+"/.bashrc";

    log("Allow earlmgr to modify the bashrc with the following?");
    println(f"    {echo_cmd}");
    let inp = input("[Y/n] > ");
    sleep(500000);

    if inp != "N" && inp != "n" && inp != "no" && inp != "No" {
        $echo_cmd;
    }
    else {
        log(f"NOTE: The environment variable [export {EARLMGR_INSTALL_LOC_ENVVAR}={INSTALL_BIN_LOCATION}] must be set to use earlmgr");
    }

    $f"sudo wget -P {INSTALL_BIN_LOCATION} {EARLMGR_MAIN_LINK}";
    $f"sudo mv -v {INSTALL_BIN_LOCATION}/earlmgr.earl {INSTALL_BIN_LOCATION}/earlmgr";
    $f"sudo chmod +x {INSTALL_BIN_LOCATION}/earlmgr";
    log("Done");
    sleep(500000);
}

@world fn install_earlmgr_includes() {
    log("Installing earlmgr modules");

    let echo_cmd = f"echo \"export {EARLMGR_IMPORT_LOC_ENVVAR}={INSTALL_IMPORT_LOCATION}\" >> "+env("HOME")+"/.bashrc";
    log("Allow earlmgr to modify the bashrc with the following?");
    println(f"    {echo_cmd}");
    let inp = input("[Y/n] > ");
    sleep(500000);

    if inp != "N" && inp != "n" && inp != "no" && inp != "No" {
        $echo_cmd;
    }
    else {
        log(f"NOTE: The environment variable [export {EARLMGR_IMPORT_LOC_ENVVAR}={INSTALL_IMPORT_LOCATION}] must be set to use earlmgr");
    }
    log("Done");
    sleep(500000);

    let mgr_loc = f"{INSTALL_IMPORT_LOCATION}/mgr";
    $f"sudo mkdir -p {mgr_loc}";

    foreach link in EARLMGR_MODULE_LINKS {
        $f"sudo wget -P {mgr_loc} {link}";
    }

    log("Done");
    sleep(500000);
}

@world fn check_installed_programs() {
    log("Checking prerequisites");
    foreach p in REQ_PROGRAMS {
        println(f"    ...{p}");
        if !scr::program_exists(p) {
            panic(f"{p} is required for earlmgr");
        }
    }
    log("Ok");
    sleep(500000);

    log("Checking StdLib");

    let libs = sys::ls(f"{INSTALL_PREFIX}/include/EARL/std");
    if len(libs) <= 0 {
        panic("It seems that the StdLib is not installed. How did we get here?");
    }
    log("Ok");

    sleep(500000);
}

if len(env(f"{EARLMGR_INSTALL_LOC_ENVVAR}")) == 0
   || len(env(f"{EARLMGR_IMPORT_LOC_ENVVAR}")) == 0 {

    log("This seems to be the first time this script has been run.");
    sleep(1000000);
    log("Some setup is required");
    sleep(1000000);

    check_installed_programs();
    install_earlmgr();
    install_earlmgr_includes();
    log("Please open a new bash instance to refresh the environment and run `earlmgr`");
    exit(0);
}

#############################
# END FIRST TIME SETUP
#############################

#############################
# BEGIN MAIN FUNCTIONALITY
#############################

unset_flag("--show-lets", "--show-muts");

import "mgr/newprog.earl"; as NP
import "mgr/templates.earl"; as TMPLTS

